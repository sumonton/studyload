<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">


    <context:component-scan base-package="com.smc.ssm"></context:component-scan>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    <!--开放对静态资源的方法    -->
    <mvc:default-servlet-handler/>
    <!--开启MVC的注解驱动-->
    <mvc:annotation-driven/>

    <!--配置文件上传解析器，将上传文件转化为MultipartFile-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>
    <!--配置拦截器-->
    <!--    <mvc:interceptors>-->

    <!--        <bean class="com.smc.mvc.interceptor.FirstInterceptor"></bean>-->
    <!--        <ref bean="firstInterceptor"></ref>-->
    <!--以上两种对所有请求都执行拦截-->
    <!--指定路径拦截-->
    <!--        <mvc:interceptor>-->
    <!--            <mvc:mapping path="/*"/>&lt;!&ndash;拦截所有斜线下的一层，/**为任意层&ndash;&gt;-->
    <!--            <mvc:exclude-mapping path="/"/>&lt;!&ndash;排除/层&ndash;&gt;-->
    <!--            <ref bean="firstInterceptor"></ref>-->
    <!--        </mvc:interceptor>-->
    <!--        <ref bean="firstInterceptor"></ref>-->
    <!--        <ref bean="secondInterceptor"></ref>-->
    <!--    </mvc:interceptors>-->

    <!--配置异常处理-->
    <!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
    <!--        <property name="exceptionMappings">-->
    <!--            <props>-->
    <!--                <prop key="java.lang.ArithmeticException">error</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--        &lt;!&ndash;设置异常信息共享在请求域中的键       &ndash;&gt;-->
    <!--        <property name="exceptionAttribute" value="ex"></property>-->
    <!--    </bean>-->

    <!--引入外部属性文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置druid连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driverClass}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
    </bean>
    <!--    spring事务管理-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--开启事务注解-->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"></tx:annotation-driven>
    <!--    创建出sqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
<!--        指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
<!--        指定mapper文件的位置，若是在mybatis全局文件中配置需要mapper.xml和mapper类包相同-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
<!--    扫描所有mapper接口的实现，让这些接口自动注入-->
    <mybatis:scan base-package="com.smc.ssm.mapper" />
<!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        <property name="basePackage" value="com.smc.ssm.mapper"></property>-->
<!--    </bean>-->
</beans>