<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smc.mybatis.dao.EmployeeMapperDynamicSQL">
    <cache eviction="FIFO" flushInterval="100000" readOnly="false" size="1024"></cache>

    <select id="findEmpsByConditionIf" resultType="com.smc.mybatis.bean.Employee" databaseId="mysql">
        select * from tb1_employee
        <where>
            <!--test:判断表达式（OGNL）类似c:if test -->
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="lastName != null and lastName != ''">
                and last_name like #{lastName}
            </if>
            <if test="email !=null and email.trim()!=''">
                and email = #{email}
            </if>
            <if test="gender == 0 or gender == 1">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="findEmpsByConditionTrim" resultType="com.smc.mybatis.bean.Employee" databaseId="mysql">
        select * from tb1_employee
        <!--where标签只能解决前面多出的and，后面多出的and无法解决
            prefix="":前缀，trim标签中是整个字符串拼接后的结果，prefix个整个拼串后的整个字符串加一个前缀
            prefixOverrides="":前缀覆盖，去掉整个字符串前面多余的字符
            suffix="":给拼串后的字符串添加后缀
            suffixOverrides=""：去掉整个字符串后面多余的字符
        -->
        <trim prefix="where" suffixOverrides="and">
            <!--test:判断表达式（OGNL）类似c:if test -->
            <if test="id != null">
                id = #{id} and
            </if>
            <if test="lastName != null and lastName != ''">
                last_name like #{lastName} and
            </if>
            <if test="email !=null and email.trim()!=''">
                email = #{email} and
            </if>
            <if test="gender == 0 or gender == 1">
                gender = #{gender}
            </if>
        </trim>
    </select>
    <select id="findEmpsByConditionChoose" resultType="com.smc.mybatis.bean.Employee">
        select * from tb1_employee
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName != null">
                    last_name like #{lastName}
                </when>
                <when test="email != null">
                    email = #{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>
    <update id="updateEmployee">
        update tb1_employee
        <set><!--防止多出一些无用的逗号-->
            <if test="lastName != null">
                last_name=#{lastName},
            </if>
            <if test="email != null">
                email=#{email},
            </if>
            <if test="gender != null">
                gender=#{gender}
            </if>
        </set>
        where id=#{id}
    </update>
    <select id="findEmployeeForeach" resultType="com.smc.mybatis.bean.Employee">
        select * from tb1_employee
        <!--collection:指定要遍历的集合，list类型的参数会特殊处理封装在map中，map的key就叫list
            将遍历出的元素赋值给item指定的变量
            #{变量名}就能取出当前遍历的元素
            separator:每个元素之间的分隔符
            open:遍历出的结果加一个开始的字符
            close:遍历出的结果加一个结束的字符
            index:索引，遍历list的时候是索引，item是值，遍历map的时候index就是map的key，item是值
        -->
        <foreach collection="ids" item="item_id" separator="," open="where id in (" close=")">
            #{item_id}
        </foreach>

    </select>
    <!--    <insert id="addEmpsForeach">-->
    <!--        insert into tb1_employee(last_name,email,gender,d_id) values-->
    <!--        <foreach collection="emps" item="emp" separator=",">-->
    <!--            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})-->
    <!--        </foreach>-->
    <!--    </insert>-->
    <insert id="addEmpsForeach">
        <foreach collection="emps" item="emp" separator=";">
            insert into tb1_employee(last_name,email,gender,d_id) values
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>
    <!--    List<Employee> getEmpsTestInnerParameter(Employee employee);-->
    <select id="getEmpsTestInnerParameter" resultType="com.smc.mybatis.bean.Employee">
        <if test="_databaseId =='mysql' ">
            <!--使用include标签来调用 -->
            <include refid="insertColumn"></include>
            <!--bind可以将值绑定到一个变量中-->
            <bind name="_lastName" value="'%'+lastName+'%'"/>
            <if test="_parameter != null">
                where last_name like #{_lastName}
            </if>
        </if>
        <if test="_databaseId == 'oracle'">
            select * from tb1_employee
        </if>
    </select>
    <sql id="insertColumn">
        select *
        from tb1_employee
    </sql>
</mapper>